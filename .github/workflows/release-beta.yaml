name: 发布预览版

on:
  workflow_dispatch:
    pull_request:
  push:
    branches:
      - "!main"
    tags:
      - "!**"

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  beta-version:
    runs-on: ubuntu-latest
    outputs:
      beta_version: ${{ steps.set-version.outputs.BETA_VERSION }}
      short_commit_hash: ${{ steps.get-sha.outputs.SHORT_COMMIT_HASH }}
      pr_number: ${{ steps.get-pr-number.outputs.PR_NUMBER }}
      build_timestamp: ${{ steps.get-build-timestamp.outputs.BUILD_TIMESTAMP }}
      package_name: ${{ steps.set-version.outputs.PACKAGE_NAME }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.13.2

      - name: 生成 Beta 版本号
        id: set-version
        run: |
          git fetch origin ${{ github.ref_name }} --depth=100
          git checkout ${{ github.ref_name }}
          VERSION=$(pnpm pkg get version | tr -d '"')
          BETA_VERSION="$VERSION-beta.$(date +%s)"
          PACKAGE_NAME=$(pnpm pkg get name | tr -d '"')
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "BETA_VERSION=$BETA_VERSION" >> $GITHUB_ENV
          echo "BETA_VERSION=$BETA_VERSION" >> $GITHUB_OUTPUT
          echo "生成的 Beta 版本号: $BETA_VERSION"
          
      - name: 获取分支的最新提交哈希
        id: get-sha
        run: |
          BRANCH=${{ github.ref_name }}
          git fetch --depth=1 origin $BRANCH
          SHORT_COMMIT_HASH=$(git rev-parse --short FETCH_HEAD)
          echo "SHORT_COMMIT_HASH=$SHORT_COMMIT_HASH" >> $GITHUB_ENV
          echo "SHORT_COMMIT_HASH=$SHORT_COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "分支 $BRANCH 的最新短哈希为: $SHORT_COMMIT_HASH"

      - name: 获取构建时间
        id: get-build-timestamp
        run: |
          git fetch origin ${{ github.ref_name }} --depth=1
          BUILD_TIMESTAMP_UTC=$(git show -s --format=%cd --date=iso-strict origin/${{ github.ref_name }})
          echo "BUILD_TIMESTAMP_UTC=$BUILD_TIMESTAMP_UTC"
          BUILD_TIMESTAMP=$(TZ=Asia/Shanghai date -d "$BUILD_TIMESTAMP_UTC" +"%Y-%m-%d %H:%M:%S")

          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "构建时间: $BUILD_TIMESTAMP"

      - name: 获取 PR 编号
        id: get-pr-number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "正在查找与版本发布分支相关的 PR..."
          
          PR_NUMBER=$(gh pr list --state open --json number,headRefName --jq '[.[] | select(.headRefName | startswith("release-please--branches--main--components--${{ env.package_name }}"))] | .[0].number')

          if [[ -z "$PR_NUMBER" || "$PR_NUMBER" == "null" ]]; then
            echo "未找到开放状态的相关 PR"
            PR_NUMBER=""
          else
            echo "找到的 PR 编号: $PR_NUMBER"
          fi

          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT

  build:
    needs: beta-version
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: main

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.13.2
          run_install: |
            - args: [--no-frozen-lockfile]

      - name: 构建
        run: |
          pnpm build
          pnpm pkg delete devDependencies
          pnpm pkg set version="${{ needs.beta-version.outputs.beta_version }}"
          mkdir -p ${{ runner.temp }}/temp/
          cp -r package.json CHANGELOG.md README.md LICENSE resources config lib ${{ runner.temp }}/temp/
      
      - name: 构建文件
        run: |
          if [ "$(git ls-files | wc -l)" -gt 0 ]; then
            git rm -rf .
          fi
          cp -r ${{ runner.temp }}/temp/* ./
          rm -rf node_modules pnpm-lock.yaml
      
      - name: 获取主分支的最新提交消息
        id: commit-message
        run: |
          echo "commit_msg=$(git log origin/${{ github.ref_name }} -1 --pretty=format:'%s')" >> $GITHUB_ENV

      - name: 提交并推送更改
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: "${{ env.commit_msg }}"
          empty: true
          amend: true
          force: true
          branch: "build"

  publish-to-pkg-pr-new:
    needs: [beta-version, build]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: build
      
      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.13.2

      - name: 发布预览版
        run: |
          pnpm dlx pkg-pr-new publish --json output.json --comment=off > pkg-output.txt 2>&1
          
          echo "## 成功推送的Package包 :" >> $GITHUB_STEP_SUMMARY
          echo "包名: \`${{ needs.beta-version.outputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "版本号: \`${{ needs.beta-version.outputs.beta_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "commit: \`${{ needs.beta-version.outputs.short_commit_hash }}\`" >> $GITHUB_STEP_SUMMARY
          echo "发布时间: \`${{ needs.beta-version.outputs.build_timestamp }}\`" >> $GITHUB_STEP_SUMMARY
          echo "发布者: \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY
          echo "使用 pnpm:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "pnpm add https://pkg.pr.new/${{ needs.beta-version.outputs.package_name }}@${{ needs.beta-version.outputs.short_commit_hash }} -w" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "## 完整输出信息" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat pkg-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY


      - name: 发布 PR 评论
        if: ${{ needs.beta-version.outputs.pr_number != '' }}
        uses: thollander/actions-comment-pull-request@v3
        with:
          pr-number: ${{ needs.beta-version.outputs.pr_number }}
          message: |
            🎉 🎉 🎉 **构建完成！**
            该版本是基于 `${{ github.ref_name }}` 分支的快照 [**`${{ needs.beta-version.outputs.short_commit_hash }}`**](https://github.com/${{ github.repository }}/commit/${{ needs.beta-version.outputs.short_commit_hash }}) 所构建的。

            你可以通过以下命令安装该版本：
            ```
            pnpm add https://pkg.pr.new/${{ needs.beta-version.outputs.package_name }}@${{ needs.beta-version.outputs.short_commit_hash }} -w
            ```
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传NPM包信息
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-info
          path: |
            pkg-output.txt
            output.json

  create-github-release:
    needs: [beta-version, build]
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 生成 ZIP 文件
        run: |
          ZIP_NAME="build-${{ needs.beta-version.outputs.beta_version }}.zip"
          echo "生成 ZIP: $ZIP_NAME"
          zip -r $ZIP_NAME . -x "*.git/*"
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: 创建 Release 并上传产物
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ needs.beta-version.outputs.beta_version }}"
          name: "${{ needs.beta-version.outputs.beta_version }}"
          target_commitish: build
          body: |
            ### 🎉 构建完成！
            - 此版本是基于快照 [`${{ needs.beta-version.outputs.short_commit_hash }}`](https://github.com/${{ github.repository }}/tree/${{ needs.beta-version.outputs.short_commit_hash }}) 所构建的，[**点击此处查看更改**](https://github.com/${{ github.repository }}/commit/${{ needs.beta-version.outputs.short_commit_hash }}) By @${{ github.actor }}

            ### 安装该版本
            **以下安装方式任选其一**
            ---
            <details>
            <summary>使用 Git</summary>
            
            **插件根目录** 下执行
            ```sh
            git fetch origin
            ```
            ```sh
            git checkout ${{ needs.beta-version.outputs.short_commit_hash }}
            ```

            若报错缺失依赖，可先运行 `pnpm install` 安装或更新依赖。

            </details>
           

            <details>
            <summary>使用包管理器</summary>
          
            **Karin 根目录** 下执行

            ```sh
            pnpm add ${{ needs.beta-version.outputs.package_name }}@${{ needs.beta-version.outputs.beta_version }} -w
            ```

            </details>
            
            ---
            **此版本非正式版本，可能存在一些问题，请谨慎使用！**
            构建时间：${{ needs.beta-version.outputs.build_timestamp }}
          draft: false
          prerelease: true
          files: build-${{ needs.beta-version.outputs.beta_version }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ needs.beta-version.outputs.beta_version }}.zip
          path: build-${{ needs.beta-version.outputs.beta_version }}.zip
